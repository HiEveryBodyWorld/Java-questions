http://blog.csdn.net/u010246789/article/details/51516511



1.在controller中设置支付宝支付的入口
//充值接口
    @RequestMapping(value = "/recharge", method = RequestMethod.POST)
    @ResponseBody
    public  ModelAndView recharge(@RequestParam(value = "phone_num", required = false) String phone_num,
    		@RequestParam(value = "package_id", required = false) String package_id,
    		@RequestParam(value = "money", required = false) String money, 
    		@RequestParam(value = "pay_type", required = false) Integer pay_type){
    	
    	ModelAndView mav = new ModelAndView();
    	
    	
    	Order order = new Order();
    	String orderId = "yrrecharge"+UUID.randomUUID().toString();
    	
    	order.setOrderId(orderId);
    	order.setPackageId(package_id);
    	order.setPhoneNum(phone_num);
    	order.setRechargeTime(new Date());
    	order.setTotalFee(money);
    	order.setPayType(pay_type);
    	order.setStatus(0);
    	if(0==pay_type){
        	mav.setViewName("wechat/pay_qrcode.jsp");
    	}else{
        	mav.setViewName("Alipay/alipay_check.jsp");
    	}
    	//新增订单
    	orderService.insert(order);
    	mav.addObject("orderid",orderId);
        return mav;
    }
    
  2.alipay_check.jsp
  
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="/WEB-INF/includes/taglibs.jsp"%>
<%
  String path = request.getContextPath();
  String basePath = request.getScheme() + "://"
          + request.getServerName() + ":" + request.getServerPort()
          + path;
%>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>案例</title>
<%@ include file="/WEB-INF/includes/jscss.jsp"%>
<script>
$(document).ready(function(){
	document.forms['alipaysubmit'].submit();
	});
</script>
</head>
<body>
	<form id="alipaysubmit" name="alipaysubmit" action="/alipay/open" method="post">
		<input type="hidden" name="orderid"  value="#{orderid}" />"
		<input type="submit" value="确认"  style="display:none;">
	</form>
</body>
</html>
    
   
   
 3.通过form提交转到支付宝接口；
 /**
     * 支付宝提供给商户的服务接入网关URL(新)
     */
    private static final String ALIPAY_GATEWAY_NEW = "https://mapi.alipay.com/gateway.do?";
    
    
    @RequestMapping("open")  
    public String open(Model model,@RequestParam String orderid,HttpServletResponse response) {  
      
        //////////////////////////////////// 请求参数//////////////////////////////////////  
    	Order ors = orderService.findById(orderid);
    	String packageid = ors.getPackageId();
    	Packages pac = packageService.findById(Integer.valueOf(packageid));
    	String packageName = pac.getPackageName();
    	Double fee = pac.getMoney();
        // 商户订单号，商户网站订单系统中唯一订单号，必填  
        String out_trade_no = orderid;  
        // 订单名称，必填  
        String subject = packageName;  
        // 付款金额，必填  
        String total_fee = String.valueOf(fee);  
        // 商品描述，可空  
        //String body = alipayRequest.getBody();  
      
        Map<String, String> havePackageParams = packageParams();
        havePackageParams.put("out_trade_no", out_trade_no);  
        havePackageParams.put("subject", subject);  
        havePackageParams.put("total_fee", total_fee);  
        //havePackageParams.put("body", body);
        
       // String paramString = createRequestParams(new AlipaySubmit().buildRequestPara(havePackageParams));
        
        //String preorderStr = sendPost(ALIPAY_GATEWAY_NEW,paramString);
	      
        String paramString = AlipaySubmit.buildRequestMysign(new AlipaySubmit().buildRequestPara(havePackageParams));
        String sHtmlText = AlipaySubmit.buildRequest(havePackageParams,"get","确认");//这个地方必须这么调用才能出现验证码，否则自己写的发送get请求的方法是不起作用的。
        response.setCharacterEncoding("UTF-8");
        PrintWriter out = response.getWriter();
		out.println(sHtmlText);
        
//        String preorderStr = sendGet(ALIPAY_GATEWAY_NEW,paramString);
//        
//        response.setCharacterEncoding("UTF-8");
//        PrintWriter out = response.getWriter();
//        out.write("<meta http-equiv='content-type' content='text/html;charset=UTF-8'/>");
//        out.write(preorderStr);
        
        
        return preorderStr;  
    }  
    
    
    
 4.配置notify url并编写controller
  @RequestMapping("notify")  
    @ResponseBody  
    public ModelAndView notify(HttpServletRequest request,HttpServletResponse response) throws ParseException, IOException{  
    	
    	ModelAndView mav = new ModelAndView();
    	
        //获取支付宝POST过来反馈信息  
        Map<String,String> params = new HashMap<String,String>();  
        Map requestParams = request.getParameterMap();  
        for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {  
            String name = (String) iter.next();  
            String[] values = (String[]) requestParams.get(name);  
            String valueStr = "";  
            for (int i = 0; i < values.length; i++) {  
                valueStr = (i == values.length - 1) ? valueStr + values[i]  
                        : valueStr + values[i] + ",";  
            }  
            //乱码解决，这段代码在出现乱码时使用。如果mysign和sign不相等也可以使用这段代码转化  
            //valueStr = new String(valueStr.getBytes("ISO-8859-1"), "gbk");  
            params.put(name, valueStr);  
        }  
          
        //获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以下仅供参考)//  
        //商户订单号  
      
        String out_trade_no = request.getParameter("out_trade_no");  
      
        //支付宝交易号  
      
        String trade_no = request.getParameter("trade_no");  
      
        //交易状态  
        String trade_status = request.getParameter("trade_status");
        
        String total_fee = request.getParameter("total_fee");
        
        //交易关闭时间
        String gmt_close = request.getParameter("gmt_close");
      
        //获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)//  
      
        if(AlipayNotify.verify(params)){//验证成功  
            //////////////////////////////////////////////////////////////////////////////////////////  
            //请在这里加上商户的业务逻辑程序代码  
      
            //——请根据您的业务逻辑来编写程序（以下代码仅作参考）——  
            boolean flg = false;  
            if(trade_status.equals("TRADE_FINISHED")){
            	
				Order or = orderService.findById(out_trade_no);
				
				httpHandler.recharge(or.getPhoneNum(), or.getPackageId(),out_trade_no);
				or.setStatus(1);
				or.setTradeNo(trade_no);
				or.setTotalFee(total_fee);
				SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = sdf.parse(gmt_close);
				or.setCloseTime(date);
                //判断该笔订单是否在商户网站中已经做过处理  
                    //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序  
                    //请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的  
                    //如果有做过处理，不执行商户的业务程序  
                      
                //注意：  
                //退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知  
				response.getWriter().write("success");
            	//TODO 将记录存入数据库
            	mav.addObject("paystatus", "success");
            	mav.setViewName("Alipay/notify_url.jsp");
            	
            	return mav;
            } 
        }else{//验证失败  
        	response.getWriter().write("fail");
        	mav.addObject("paystatus", "fail");
        	mav.setViewName("Alipay/notify_url_fail.jsp");
        	return mav;
        } 
        return null;
    }  
    
    
    
    
5.说明，程序中用到的一些方法
/**
	 * 生成订单
	 * 
	 * @param orderId
	 * @return
	 */
	private String createRequestParams(Map<String,String> paramsMap) {
//		StringBuffer sb = new StringBuffer();
//		Iterator iter = paramsMap.keySet().iterator();
//		while(iter.hasNext()){
//			Map.Entry entry = (Map.Entry)iter.next();
//			String k = (String) entry.getKey();
//			String v = (String) entry.getValue();
//			if(null!=v && !"".equals(v)){
//				sb.append(k+"="+v+"&");
//			}
//		}
		
		List<String> keys = new ArrayList<String>(paramsMap.keySet());
        Collections.sort(keys);

        String prestr = "";

        for (int i = 0; i < keys.size(); i++) {
            String key = keys.get(i);
            String value = paramsMap.get(key);

            if (i == keys.size() - 1) {//拼接时，不包括最后一个&字符
                prestr = prestr + key + "=" + value;
            } else {
                prestr = prestr + key + "=" + value + "&";
            }
        }

        return prestr;
	}
	//打包请求参数
	private Map<String,String> packageParams(){
		Map<String, String> sParaTemp = new HashMap<String, String>();  
        sParaTemp.put("service", AlipayConfig.service);  
        sParaTemp.put("partner", AlipayConfig.partner);  
        sParaTemp.put("seller_id", AlipayConfig.seller_id);  
        sParaTemp.put("payment_type", AlipayConfig.payment_type);  
        sParaTemp.put("notify_url", AlipayConfig.notify_url);  
        sParaTemp.put("return_url", AlipayConfig.return_url);  
        sParaTemp.put("anti_phishing_key", AlipayConfig.anti_phishing_key);  
        sParaTemp.put("exter_invoke_ip", AlipayConfig.exter_invoke_ip);  
        sParaTemp.put("qr_pay_mode", AlipayConfig.qr_pay_mode);
        return sParaTemp;
	}

	
	/**
     * 向指定URL发送GET方法的请求
     * 
     * @param url
     *            发送请求的URL
     * @param param
     *            请求参数，请求参数应该是 name1=value1&name2=value2 的形式。
     * @return URL 所代表远程资源的响应结果
     */
    public static String sendGet(String url, String param) {
        String result = "";
        BufferedReader in = null;
        try {
            String urlNameString = url + "?" + param;
            URL realUrl = new URL(urlNameString);
            // 打开和URL之间的连接
            URLConnection connection = realUrl.openConnection();
            // 设置通用的请求属性
            connection.setRequestProperty("accept", "*/*");
            connection.setRequestProperty("connection", "Keep-Alive");
            connection.setRequestProperty("user-agent",
                    "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
            // 建立实际的连接
            connection.connect();
            // 获取所有响应头字段
            Map<String, List<String>> map = connection.getHeaderFields();
            // 遍历所有的响应头字段
            for (String key : map.keySet()) {
                System.out.println(key + "--->" + map.get(key));
            }
            // 定义 BufferedReader输入流来读取URL的响应
            in = new BufferedReader(new InputStreamReader(
                    connection.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                result += line;
            }
        } catch (Exception e) {
            System.out.println("发送GET请求出现异常！" + e);
            e.printStackTrace();
        }
        // 使用finally块来关闭输入流
        finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return result;
    }

    /**
     * 向指定 URL 发送POST方法的请求
     * 
     * @param url
     *            发送请求的 URL
     * @param param
     *            请求参数，请求参数应该是 name1=value1&name2=value2 的形式。
     * @return 所代表远程资源的响应结果
     */
    public static String sendPost(String url, String param) {
        PrintWriter out = null;
        BufferedReader in = null;
        String result = "";
        try {
            URL realUrl = new URL(url);
            // 打开和URL之间的连接
            URLConnection conn = realUrl.openConnection();
            // 设置通用的请求属性
            conn.setRequestProperty("accept", "*/*");
            conn.setRequestProperty("connection", "Keep-Alive");
            conn.setRequestProperty("user-agent",
                    "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
            // 发送POST请求必须设置如下两行
            conn.setDoOutput(true);
            conn.setDoInput(true);
            // 获取URLConnection对象对应的输出流
            out = new PrintWriter(conn.getOutputStream());
            // 发送请求参数
            out.print(param);
            // flush输出流的缓冲
            out.flush();
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(
                    new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                result += line;
            }
        } catch (Exception e) {
            System.out.println("发送 POST 请求出现异常！"+e);
            e.printStackTrace();
        }
        //使用finally块来关闭输出流、输入流
        finally{
            try{
                if(out!=null){
                    out.close();
                }
                if(in!=null){
                    in.close();
                }
            }
            catch(IOException ex){
                ex.printStackTrace();
            }
        }
        return result;
    }    
    
    
    
    
    
6.需要依赖的文件是 支付宝提供的demo中的AlipayCore,AlipayNotify,AlipaySubmit,AlipayConfig
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
